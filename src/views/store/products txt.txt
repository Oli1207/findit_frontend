import React, { useState, useEffect } from "react";
import apiInstance from "../../utils/axios";
import { Link } from "react-router-dom";
import GetCurrentAddress from "../plugin/UserCountry";
import UserData from "../plugin/UserData";
import CardID from "../plugin/CardID";
import Swal from "sweetalert2";
import informationIcon from "../../assets/information.png";
import { useMediaQuery } from "react-responsive";
import Review from "./Review";

const Toast = Swal.mixin({
  toast: true,
  position: "top",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
});

function Products() {
  const [products, setProducts] = useState([]);
  const [category, setCategory] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [selectedColors, setSelectedColors] = useState({});
  const [selectedSize, setSelectedSize] = useState({});
  const [showSpecifications, setShowSpecifications] = useState({});
  const [colorValue, setColorValue] = useState("No Color");
  const [sizeValue, setSizeValue] = useState("No Size");
  const [qtyValue, setQtyValue] = useState(1);
  const currentAddress = GetCurrentAddress();
  const userData = UserData();
  const cart_id = CardID();
  const isMobile = useMediaQuery({ maxWidth: 768 });

  useEffect(() => {
    apiInstance.get("products/").then((response) => {
      setProducts(response.data);
    });
  }, []);

  useEffect(() => {
    apiInstance.get("category/").then((response) => {
      setCategory(response.data);
    });
  }, []);

  const handleReviewIconClick = (product) => {
    setSelectedProduct(product);
  };

  const handleCloseReview = () => {
    setSelectedProduct(null);
  };

  const toggleSpecifications = (productId) => {
    setShowSpecifications((prev) => ({
      ...prev,
      [productId]: !prev[productId],
    }));
  };

  const handleColorButtonClick = (product_id, colorName) => {
    setColorValue(colorName);
    setSelectedColors((prevSelectedColors) => ({
      ...prevSelectedColors,
      [product_id]: colorName,
    }));
  };

  const handleSizeButtonClick = (product_id, sizeName) => {
    setSizeValue(sizeName);
    setSelectedSize((prevSelectedSize) => ({
      ...prevSelectedSize,
      [product_id]: sizeName,
    }));
  };

  const handleQtyChange = (event) => {
    setQtyValue(event.target.value);
  };

  const handleAddToCart = async (product_id, price, shipping_amount) => {
    const formData = new FormData();
    formData.append("product_id", product_id);
    formData.append("user_id", userData?.user_id);
    formData.append("qty", qtyValue);
    formData.append("price", price);
    formData.append("shipping_amount", shipping_amount);
    formData.append("country", currentAddress.country);
    formData.append("size", sizeValue);
    formData.append("color", colorValue);
    formData.append("cart_id", cart_id);

    const response = await apiInstance.post(`cart-view/`, formData);
    Toast.fire({
      icon: "success",
      title: response.data.message,
    });
  };

  const addToWishList = async (productId) => {
    const formdata = new FormData();
    formdata.append("product_id", productId);
    formdata.append("user_id", userData?.user_id);

    const response = await apiInstance.post(
      `customer/wishlist/${userData?.user_id}/`,
      formdata
    );
    Swal.fire({
      icon: "success",
      title: response.data.message,
    });
  };

  return (
    <>
      <main>
        <div className="container">
          <div className="row mb-3">
            {category?.map((c, index) => (
              <div className="col-lg-2 col-md-3 col-sm-4 mb-2" key={index}>
                <button className="btn btn-outline-primary w-100">
                  {c.title}
                </button>
              </div>
            ))}
          </div>

          <div className="row g-3">
            {products?.map((product) => (
              <div className="col-lg-4 col-md-6 col-sm-12" key={product.id}>
                <div className="card shadow-sm h-100">
                  <div
                    className="bg-image hover-zoom ripple position-relative"
                    data-mdb-ripple-color="light"
                  >
                    <Link to={`/detail/${product.slug}`}>
                      <img
                        src={product.image}
                        className="card-img-top"
                        alt={product.title}
                        style={{ height: "60vh", objectFit: "cover" }}
                      />
                    </Link>
                    {isMobile && (
                      <button
                        className="btn btn-secondary position-absolute top-2 end-2 rounded-circle"
                        onClick={() => handleReviewIconClick(product)}
                        style={{ background: "rgba(0, 0, 0, 0.6)" }}
                      >
                        <i className="fas fa-comment"></i>
                      </button>
                    )}
                  </div>

                  <div className="card-body d-flex flex-column justify-content-between">
                    <div>
                      <Link
                        to={`/detail/${product.slug}`}
                        className="text-decoration-none"
                      >
                        <h5 className="card-title text-dark">
                          {product.title}
                        </h5>
                      </Link>
                      <p className="text-muted small">{product.category?.title}</p>
                      <div className="d-flex justify-content-between align-items-center">
                        <h6 className="mb-0 text-primary">
                          {product.price} frs
                        </h6>
                        {product.old_price && (
                          <h6 className="mb-0 text-muted">
                            <strike>{product.old_price}</strike>
                          </h6>
                        )}
                      </div>
                    </div>

                    <div className="mt-3">
                      <div className="btn-group w-100">
                        <button
                          className="btn btn-primary dropdown-toggle"
                          type="button"
                          id={`dropdownMenu${product.id}`}
                          data-bs-toggle="dropdown"
                          aria-expanded="false"
                        >
                          <i className="fas fa-sliders-h me-2"></i>Variations
                        </button>
                        <ul
                          className="dropdown-menu p-3"
                          aria-labelledby={`dropdownMenu${product.id}`}
                        >
                          <div className="mb-2">
                            <label className="form-label">
                              <b>Quantit√©</b>
                            </label>
                            <input
                              className="form-control"
                              value={qtyValue}
                              onChange={handleQtyChange}
                              type="number"
                              min="1"
                            />
                          </div>
                          {product.size?.length > 0 && (
                            <div className="mb-2">
                              <label className="form-label">
                                <b>Taille</b>:{" "}
                                {selectedSize[product.id] || "Pas de taille"}
                              </label>
                              <div className="d-flex flex-wrap gap-2">
                                {product.size.map((size, index) => (
                                  <button
                                    key={index}
                                    onClick={() =>
                                      handleSizeButtonClick(product.id, size.name)
                                    }
                                    className="btn btn-outline-primary btn-sm"
                                  >
                                    {size.name}
                                  </button>
                                ))}
                              </div>
                            </div>
                          )}
                          {product.color?.length > 0 && (
                            <div className="mb-2">
                              <label className="form-label">
                                <b>Couleur</b>:{" "}
                                {selectedColors[product.id] || "Pas de couleur"}
                              </label>
                              <div className="d-flex flex-wrap gap-2">
                                {product.color.map((color, index) => (
                                  <button
                                    key={index}
                                    className="btn btn-sm p-3"
                                    style={{
                                      backgroundColor: `${color.color_code}`,
                                    }}
                                    onClick={() =>
                                      handleColorButtonClick(product.id, color.name)
                                    }
                                  />
                                ))}
                              </div>
                            </div>
                          )}
                        </ul>
                      </div>

                      <div className="d-flex justify-content-between mt-3">
                        <button
                          type="button"
                          className="btn btn-primary flex-grow-1 me-2"
                          onClick={() =>
                            handleAddToCart(
                              product.id,
                              product.price,
                              product.shipping_amount
                            )
                          }
                        >
                          <i className="fas fa-shopping-cart me-2" />
                          Ajouter au panier
                        </button>
                        <button
                          type="button"
                          className="btn btn-outline-danger flex-grow-1"
                          onClick={() => addToWishList(product.id)}
                        >
                          <i className="fas fa-heart me-2" />
                          Favoris
                        </button>
                      </div>
                    </div>

                    <div className="mt-3">
                      <button
                        type="button"
                        className="btn btn-link text-muted"
                        onClick={() => toggleSpecifications(product.id)}
                      >
                        <i className="fas fa-info-circle me-2" />
                        Voir les sp√©cifications
                      </button>
                      {showSpecifications[product.id] && (
                        <div className="mt-3 small">
                          {product.specification?.map((spec, index) => (
                            <div key={index} className="d-flex">
                              <strong className="me-2">{spec.title}:</strong>{" "}
                              {spec.content}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {isMobile && selectedProduct && (
            <div className="review-overlay">
              <div className="review-container">
                <button className="btn btn-close" onClick={handleCloseReview}>
                  &times;
                </button>
                <Review product={selectedProduct} userData={userData} />
              </div>
            </div>
          )}
        </div>
      </main>

      <style jsx>{`
        .review-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.7);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        }

        .review-container {
          background: #fff;
          padding: 20px;
          border-radius: 8px;
          max-width: 90%;
          max-height: 80%;
          overflow-y: auto;
          position: relative;
        }

        .btn-close {
          position: absolute;
          top: 10px;
          right: 10px;
          font-size: 1.5rem;
          background: none;
          border: none;
          color: #000;
        }
      `}</style>
    </>
  );
}

export default Products;