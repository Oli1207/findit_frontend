from django.shortcuts import render, redirect
from django.conf import settings
from userauths.models import *
from decimal import Decimal
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from rest_framework.decorators import api_view
from store.models import *
from store.serializers import *
from django.http import JsonResponse

from rest_framework import generics, status
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
import cv2
import numpy as np
import stripe
from rest_framework.parsers import MultiPartParser, FormParser
from concurrent.futures import ThreadPoolExecutor
stripe.api_key = settings.STRIPE_SECRET_KEY

def send_notification(user=None, vendor=None, order=None, order_item=None):
    Notification.objects.create(
        user=user,
        vendor=vendor,
        order=order,
        order_item=order_item
    )    

class CategoryListAPIView(generics.ListAPIView):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [AllowAny]

class ProductListAPIView(generics.ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]

class ProductDetailAPIView(generics.RetrieveAPIView):
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]

    def get_object(self):
        slug = self.kwargs['slug']
        return Product.objects.get(slug=slug)
    
class ImageSearchAPIView(APIView):
    parser_classes = (MultiPartParser, FormParser)

    def post(self, request, *args, **kwargs):
        file = request.FILES['image']
        image = cv2.imdecode(np.frombuffer(file.read(), np.uint8), cv2.IMREAD_GRAYSCALE)

        # Utilisation de SIFT pour extraire les caractéristiques
        sift = cv2.SIFT_create()
        keypoints, descriptors = sift.detectAndCompute(image, None)

        if descriptors is None:
            return Response({"message": "Aucune caractéristique détectée dans l'image."}, status=status.HTTP_400_BAD_REQUEST)

        bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
        best_matches = []

        for product in Product.objects.exclude(orb_features__isnull=True):
            product_descriptors = np.frombuffer(product.orb_features, dtype=np.uint8).reshape(-1, 128)

            matches = bf.match(descriptors, product_descriptors)
            matches = sorted(matches, key=lambda x: x.distance)

            good_matches = [m for m in matches if m.distance < 200]

            best_matches.append((product, len(good_matches)))

        best_matches.sort(key=lambda x: x[1], reverse=True)
        best_products = [match[0] for match in best_matches if match[1] > 0]

        if not best_products:
            return Response([], status=status.HTTP_200_OK)

        serializer = ProductSerializer(best_products[:5], many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    
class PresentationListAPIView(generics.ListAPIView):
    queryset = Presentation.objects.all()
    serializer_class = PresentationSerializer
    permission_classes = [AllowAny]

class CartAPIView(generics.ListCreateAPIView):
    queryset = Cart.objects.all()
    serializer_class = CartSerializer
    permission_classes = [AllowAny]

    def create(self, request, *args, **kwargs):
        payload = request.data

        product_id = payload['product_id']
        user_id = payload['user_id']
        qty = payload['qty']
        price = payload['price']
        shipping_amount = payload['shipping_amount']
        country = payload['country']
        size = payload['size']
        color = payload['color']
        cart_id = payload['cart_id']
        
        product = Product.objects.get(id=product_id)
        if user_id != "undefined":
            user = User.objects.get(id=user_id)
        else:
            user = None

        tax = Tax.objects.filter(country=country).first()
        if tax:
            tax_rate = tax.rate / 100
        else:
            tax_rate = 0
        cart = Cart.objects.filter(cart_id=cart_id, product=product).first()

        if cart:
            cart.product = product
            cart.user = user
            cart.qty = qty
            cart.price = price
            cart.sub_total = Decimal(price) * int(qty)
            cart.shipping_amount = Decimal(shipping_amount) * int(qty)
            cart.tax_fee = int(qty) * Decimal(tax_rate)
            cart.color = color
            cart.size = size
            cart.country = country
            cart.cart_id = cart_id

            service_fee_percentage = 10 / 100
            cart.service_fee = Decimal(service_fee_percentage) * cart.sub_total

            cart.total = cart.sub_total + cart.shipping_amount + cart.service_fee + cart.tax_fee
            cart.save()

            return Response({'message': "Cart Updated"}, status=status.HTTP_200_OK)
        
        else:
            cart = Cart()
            cart.product = product
            cart.user = user
            cart.qty = qty
            cart.price = price
            cart.sub_total = Decimal(price) * int(qty)
            cart.shipping_amount = Decimal(shipping_amount) * int(qty)
            cart.tax_fee = int(qty) * Decimal(tax_rate)
            cart.color = color
            cart.size = size
            cart.country = country
            cart.cart_id = cart_id

            service_fee_percentage = 10 / 100
            cart.service_fee = Decimal(service_fee_percentage) * cart.sub_total

            cart.total = cart.sub_total + cart.shipping_amount + cart.service_fee + cart.tax_fee
            cart.save()

            return Response({'message': "Cart created successfully"}, status=status.HTTP_200_OK)


class CartListView(generics.ListAPIView):
    serializer_class = CartSerializer
    permission_classes = [AllowAny]
    queryset = Cart.objects.all()

    def get_queryset(self):
       cart_id = self.kwargs['cart_id']
       user_id = self.kwargs.get('user_id')

       if user_id is not None:
           user = User.objects.get(id=user_id)
           queryset = Cart.objects.filter(user=user, cart_id=cart_id)
       else:
           queryset = Cart.objects.filter(cart_id=cart_id)

       return queryset

class CartDetailView(generics.RetrieveAPIView):
    serializer_class = CartSerializer
    permission_classes = [AllowAny]
    lookup_field = "cart_id"

    def get_queryset(self):
       cart_id = self.kwargs['cart_id']
       user_id = self.kwargs.get('user_id')

       if user_id is not None:
           user = User.objects.get(id=user_id)
           queryset = Cart.objects.filter(user=user, cart_id=cart_id)
       else:
           queryset = Cart.objects.filter(cart_id=cart_id)

       return queryset

    def get(self, request, *args, **kwargs):
        queryset = self.get_queryset()

        total_shipping = 0.0
        total_tax = 0.0
        total_service_fee = 0.0
        total_sub_total = 0.0
        total_total = 0.0

        for cart_item in queryset:
            total_shipping += float(self.calculate_shipping(cart_item))
            total_tax += float(self.calculate_tax(cart_item))
            total_service_fee += float(self.calculate_service_fee(cart_item))
            total_sub_total += float(self.calculate_sub_total(cart_item))
            total_total += float(self.calculate_total(cart_item))


        data = {
            'shipping': total_shipping,
            'tax': total_tax,
            'service_fee': total_service_fee,
            'sub_total' : total_sub_total,
            'total': total_total
        }

        return Response(data)

    def calculate_shipping(self, cart_item):
        return cart_item.shipping_amount
        
    def calculate_tax(self, cart_item):
        return cart_item.tax_fee
        
    def calculate_service_fee(self, cart_item):
        return cart_item.service_fee
        
    def calculate_sub_total(self, cart_item):
        return cart_item.sub_total
        
    def calculate_total(self, cart_item):
        return cart_item.total
    
# class CartItemDeleteAPIView(generics.DestroyAPIView):
#     serializer_class = CartSerializer
#     lookup_field = 'cart_id'

#     def get_object(self):
#         cart_id = self.kwargs['cart_id']
#         item_id = self.kwargs['item_id']
#         user_id = self.kwargs.get('user_id')

#         if user_id:
#             user = User.objects.get(id=user_id)
#             cart = Cart.objects.get(id=item_id, cart_id=cart_id, user=user)
#         else:
#             cart = Cart.objects.get(id=item_id, cart_id=cart_id)

#         return cart


# class CreateOrderAPIView(generics.CreateAPIView):
#     serializer_class = CartOrderSerializer
#     queryset = CartOrder.objects.all()
#     permission_classes = [AllowAny]

#     def create(self, request):
#         payload = request.data

#         full_name = payload['full_name']
#         email = payload['email']
#         mobile = payload['mobile']
#         address = payload['address']
#         city = payload['city']
#         state = payload['state']
#         country = payload['country']
#         cart_id = payload['cart_id']
#         user_id = payload['user_id']

#         try:
#             user = User.objects.get(id=user_id)
#         except:
#             user = None

#         cart_items = Cart.objects.filter(cart_id=cart_id)

#         total_shipping = Decimal(0.00)
#         total_tax = Decimal(0.00)
#         total_service_fee = Decimal(0.00)
#         total_sub_total = Decimal(0.00)
#         total_initial_total = Decimal(0.00)
#         total_total = Decimal(0.00)

#         order = CartOrder.objects.create(
#             buyer=user,
#             full_name=full_name,
#             email = email,
#             mobile = mobile,
#             address = address,
#             city = city,
#             state = state,
#             country = country,
#         )

#         for c in cart_items:
#             CartOrderItem.objects.create(
#                 order = order,
#                 product = c.product,
#                 vendor = c.product.vendor,
#                 qty = c.qty,
#                 color=c.color,
#                 size = c.size,
#                 price = c.price,
#                 sub_total = c.sub_total,
#                 shipping_amount=c.shipping_amount,
#                 service_fee = c.service_fee,
#                 tax_fee=c.tax_fee,
#                 total=c.total,
#                 initial_total=c.total
#             )

#             total_shipping += Decimal(c.shipping_amount)
#             total_tax += Decimal(c.tax_fee)
#             total_service_fee += Decimal(c.service_fee)
#             total_sub_total += Decimal(c.sub_total)
#             total_initial_total += Decimal(c.total)
#             total_total += Decimal(c.total)

#             order.vendor.add(c.product.vendor)

#         order.sub_total = total_sub_total
#         order.shipping_amount = total_shipping
#         order.tax_fee = total_tax
#         order.service_fee = total_service_fee
#         order.initial_total = total_initial_total
#         order.total = total_total

#         order.save()

#         return Response({"Message": "Order Created Successfully", "order_oid": order.oid}, status=status.HTTP_201_CREATED)


class CheckOutView(generics.RetrieveAPIView):
    serializer_class = CartOrderSerializer
    lookup_field = 'order_oid'
    permission_classes = [AllowAny]

    def get_object(self):
        order_oid = self.kwargs['order_oid']
        order = CartOrder.objects.get(oid=order_oid)
        return order

class CouponAPIView(generics.CreateAPIView):
    serializer_class = CouponSerializer
    queryset = Coupon.objects.all()
    permission_classes = [AllowAny]

    def create(self, request, *args, **kwargs):
        payload = request.data

        order_oid = payload['order_oid']
        coupon_code = payload['coupon_code']

        order = CartOrder.objects.get(oid=order_oid)
        coupon = Coupon.objects.filter(code=coupon_code, active=True).first()

        if coupon:
            order_items = CartOrderItem.objects.filter(order=order, vendor=coupon.vendor)
            if order_items:
                for i in order_items:
                    if not coupon in i.coupon.all():
                        discount = i.total * coupon.discount / 100

                        i.total -= discount
                        i.sub_total -= discount
                        i.coupon.add(coupon)
                        i.saved += discount

                        order.total -= discount
                        order.sub_total -= discount
                        order.saved += discount

                        i.save()
                        order.save()

                        return Response({"message": "Coupon Activated", "icon": "success"}, status=status.HTTP_200_OK)
                    else:
                        return Response({"message":"Coupon Already Activated", "icon":"warning"}, status=status.HTTP_200_OK)
            else:
                return Response({"message": "Order Item Does Not Exist", "icon": "error"}, status=status.HTTP_200_OK)
        else:
            return Response({"message":"Coupon Does Not Exist", "icon":"error"}, status=status.HTTP_200_OK)


class StripeCheckoutView(generics.CreateAPIView):
    serializer_class = CartOrderSerializer
    permission_classes = [AllowAny]
    queryset = CartOrder.objects.all()

    def create(self, *args, **kwargs):
        order_oid = self.kwargs['order_oid']
        order = CartOrder.objects.get(oid=order_oid)

        if not order:
            return Response({"message": "Order Not Found"}, status=status.HTTP_404_NOT_FOUND)

        try:
            checkout_session = stripe.checkout.Session.create(
                customer_email=order.email,
                payment_method_types=['card'],
                line_items=[
                    {
                        'price_data':{
                            'currency': 'usd',
                            'product_data':{
                                'name':order.full_name,
                            },
                            'unit_amount': int(order.total * 100)
                        },
                        'quantity': 1,
                    }
                ],
                mode='payment',
                success_url='http://localhost:5173/payment-success/' + order.oid + '?session_id={CHECKOUT_SESSION_ID}',
                cancel_url='http://localhost:5173/payment-failed?session_id={CHECKOUT_SESSION_ID}'
            )

            order.stripe_session_id = checkout_session.id
            order.save()

            return redirect(checkout_session.url)

        except stripe.error.StripeError as e:
            return Response({"error": f'something went wrong: {str(e)}'})

class PaymentSuccessView(generics.CreateAPIView):
    serializer_class = CartOrderSerializer
    permission_classes = [AllowAny]
    queryset = CartOrder.objects.all()

    def create(self, request, *args, **kwargs):
        payload = request.data

        order_oid = payload['order_oid']
        session_id = payload['session_id']

        order = CartOrder.objects.get(oid=order_oid)
        order_items = CartOrderItem.objects.filter(order=order)

        if session_id != 'null':
            session = stripe.checkout.Session.retrieve(session_id)

            if session.payment_status == 'paid':
                if order.payment_status == 'en_cours':
                    order.payment_status = 'paye'
                    order.save()

                    if order.buyer != None:
                        send_notification(user=order.buyer, order=order)
                    
                    for o in order_items:
                        send_notification(vendor=o.vendor, order=order, order_item=o)
                    
                    context = {
                        'order': order,
                        'order_items': order_items,
                    }
                    subject = "Votre commande a été payé avec succès"
                    text_body = render_to_string("email/customer_order_confirmation.txt", context)
                    html_body = render_to_string("email/customer_order_confirmation.html", context)
                    
                    msg = EmailMultiAlternatives(
                        subject=subject,
                        from_email=settings.FROM_EMAIL,
                        to=[order.email],
                        body=text_body
                    )
                    msg.attach_alternative(html_body, "text/html")
                    msg.send()

                    return Response({'message': 'paiement effectué'})
                else:
                    return Response({
                        "message":"déjà payé"
                    })
            elif  session.payment_status == 'unpaid':
                return Response({
                        "message":"facture non payée"
                    })
            elif  session.payment_status == 'cancelled':
                return Response({
                        "message":"Paiement annulé"
                    })
            else:
                return Response({"message": "Une erreur s'est produite, réessayez"})
        else:
            session = None



class ReviewListAPIView(generics.ListCreateAPIView):
    serializer_class = ReviewSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        product_id = self.kwargs['product_id']

        product  = Product.objects.get(id=product_id)
        reviews = Review.objects.filter(product=product)
        return reviews

    def create(self, request, *args, **kwargs):
        payload = request.data
        
        user_id = payload['user_id']
        product_id = payload['product_id']
        rating = payload['rating']
        review = payload['review']

        user = User.objects.get(id=user_id)
        product = Product.objects.get(id=product_id)

        Review.objects.create(
            user=user,
            product=product,
            rating=rating,
            review=review
            )
        return Response({"message": "Review created successfully"}, status=status.HTTP_200_OK)
@api_view(['GET'])
def search_by_text(request):
    query = request.GET.get('query', '')
    products = Product.objects.filter(title__icontains=query)
    serializer = ProductSerializer(products, many=True)
    return Response(serializer.data)

@api_view(['POST'])
def search_by_image(request):
    if 'image' not in request.FILES:
        return Response({'error': 'Missing image'}, status=400)

    uploaded_image = request.FILES['image']
    img_query = cv2.imdecode(np.frombuffer(uploaded_image.read(), np.uint8), cv2.IMREAD_GRAYSCALE)

    orb = cv2.ORB_create()
    kp1, des1 = orb.detectAndCompute(img_query, None)
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

    similar_products = []

    with ThreadPoolExecutor() as executor:
        futures = []
        for product in Product.objects.all():
            futures.append(executor.submit(process_product, product, orb, bf, des1))
        for future in futures:
            result = future.result()
            if result:
                similar_products.append(result)

    serializer = ProductSerializer(similar_products, many=True)
    return Response(serializer.data)

def process_product(product, orb, bf, des1):
    img_db = cv2.imread(product.image.path, cv2.IMREAD_GRAYSCALE)
    kp2, des2 = orb.detectAndCompute(img_db, None)
    matches = bf.match(des1, des2)
    matches = sorted(matches, key=lambda x: x.distance)
    similarity_threshold = 50
    good_matches = [match for match in matches if match.distance < similarity_threshold]
    
    if len(good_matches) > 10:
        return product
    return None

class SearchProductAPIView(generics.ListCreateAPIView):
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        query = self.request.GET.get("query")
        products = Product.objects.filter(title__icontains=query)
        return products


class UserAddressAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        profile = Profile.objects.get(user=request.user)
        return Response(
            {
                "full_name": profile.full_name,
                "mobile": profile.mobile,
                "address": profile.address,
                "city": profile.city,
                "state": profile.state,
                "country": profile.country,
            },
            status=status.HTTP_200_OK,
        )

    def post(self, request):
        payload = request.data
        profile = Profile.objects.get(user=request.user)

        profile.full_name = payload.get("full_name", profile.full_name)
        profile.mobile = payload.get("mobile", profile.mobile)
        profile.address = payload.get("address", profile.address)
        profile.city = payload.get("city", profile.city)
        profile.state = payload.get("state", profile.state)
        profile.country = payload.get("country", profile.country)
        profile.save()

        return Response({"message": "Adresse mise à jour avec succès"}, status=status.HTTP_200_OK)

class CreateOrderAPIView(generics.CreateAPIView):
    queryset = CartOrder.objects.all()

    def create(self, request, *args, **kwargs):
        payload = request.data

        # Récupération des données
        product_id = payload.get("product_id")
        user_id = payload.get("user_id")
        qty = int(payload.get("qty", 1))
        size = payload.get("size", "Default")
        color = payload.get("color", "Default")
        full_name = payload.get("full_name")
        mobile = payload.get("mobile")
        address = payload.get("address")
        city = payload.get("city")
        state = payload.get("state")
        country = payload.get("country")

        # Vérifier que le produit existe
        try:
            product = Product.objects.get(id=product_id)
        except Product.DoesNotExist:
            return Response({"error": "Produit introuvable"}, status=status.HTTP_404_NOT_FOUND)

        # Récupérer l'utilisateur et mettre à jour son profil
        try:
            user = User.objects.get(id=user_id)
        except User.DoesNotExist:
            return Response({"error": "Utilisateur introuvable"}, status=status.HTTP_404_NOT_FOUND)

        profile = Profile.objects.get(user=user)
        if full_name or mobile or address or city or state or country:
            profile.full_name = full_name or profile.full_name
            profile.mobile = mobile or profile.mobile
            profile.address = address or profile.address
            profile.city = city or profile.city
            profile.state = state or profile.state
            profile.country = country or profile.country
            profile.save()

        # Créer la commande
        order = CartOrder.objects.create(
            buyer=user,
            product=product,
            vendor=product.vendor,
            qty=qty,
            size=size,
            color=color,
            price=product.price * qty,
            full_name=profile.full_name,
            mobile=profile.mobile,
            address=profile.address,
            city=profile.city,
            state=profile.state,
            country=profile.country,
        )

        return Response(
            {
                "message": "Commande créée avec succès",
                "order_id": order.oid,
                "vendor": product.vendor.name,
                "address": {
                    "full_name": profile.full_name,
                    "mobile": profile.mobile,
                    "address": profile.address,
                    "city": profile.city,
                    "state": profile.state,
                    "country": profile.country,
                },
            },
            status=status.HTTP_201_CREATED,
        )
